'''
Created on 2018年1月13日

@author: Administrator
tf多特征非线性回归
https://www.2cto.com/kf/201704/626628.html
'''

import tensorflow as tf  
import numpy as np  
import matplotlib.pyplot as plt  
  
# 特征数
featurenum = 3
x = tf.placeholder(tf.float32, [None, featurenum])  
y = tf.placeholder(tf.float32, [None, 1])  
  
#定义神经网络中间层权值  
weights_l1 = tf.placeholder(tf.float32, [featurenum, 10]) 
biases_l1 = tf.placeholder(tf.float32, [1, 10]) 
wx_plust_b_l1 = tf.matmul(x, weights_l1) + biases_l1  
# l1 = tf.nn.relu(wx_plust_b_l1)#双曲正切函数作为激活函数  
l1 = tf.nn.tanh(wx_plust_b_l1)#双曲正切函数作为激活函数  
# l1 = tf.sigmoid(wx_plust_b_l1)
  
#定义输出层  
weights_l2 = tf.placeholder(tf.float32, [ 10,1]) 
biases_l2 = tf.placeholder(tf.float32, [ 1,1]) 
wx_plust_b_l2 = tf.matmul(l1, weights_l2) + biases_l2  
# prediction = tf.nn.relu(wx_plust_b_l2)#预测结果  
prediction = tf.nn.tanh(wx_plust_b_l2)#预测结果  
# prediction = tf.sigmoid(wx_plust_b_l2)#预测结果  
  
#代价函数  
with tf.Session() as sess:  
    sess.run(tf.global_variables_initializer())#变量初始化，一定要做  
    seed_plt = 0.042
    x_data = [
        [-seed_plt*23,0.11789,0.11910],[-seed_plt*22,0.12477,0.12820],
        [-seed_plt*21,0.14280,0.14806],[-seed_plt*20,0.15508,0.16252],[-seed_plt*19,0.16890,0.17658],
        [-seed_plt*18,0.18292,0.19115],[-seed_plt*17,0.19867,0.20520],[-seed_plt*16,0.19941,0.20397],
        [-seed_plt*15,0.16605,0.16883],[-seed_plt*14,0.15972,0.16275],[-seed_plt*13,0.16640,0.16952],
          
        [-seed_plt*12,0.15151,0.15679],[-seed_plt*11,0.15752,0.16554],[-seed_plt*10,0.18508,0.19272],
        [-seed_plt*9,0.19853,0.21006],[-seed_plt*8,0.21182,0.22585],[-seed_plt*7,0.32371,0.24690],
        [-seed_plt*6,0.25987,0.27367],[-seed_plt*5,0.28182,0.29401],[-seed_plt*4,0.28292,0.29100],
        [-seed_plt*3,0.22107,0.22590],[-seed_plt*2,0.22458,0.23236],[-seed_plt*1,0.23198,0.24061],
          
        [seed_plt*1,0.21902,0.23076],[seed_plt*2,0.24511,0.25761],[seed_plt*3,0.26545,0.28025],
        [seed_plt*4,0.27891,0.29496],[seed_plt*5,0.30306,0.32079],[seed_plt*6,0.31664,0.32712],
        [seed_plt*7,0.15473,0.15936],[seed_plt*8,0.16705,0.17397],[seed_plt*9,0.18764,0.19823],
        [seed_plt*10,0.19872,0.21006],[seed_plt*11,0.20558,0.21532],[seed_plt*12,0.20169,0.21244],
        
        [seed_plt*13,0.19800,0.20500]
          
        ]
    
    #学习率0.1
    weights_ave_l1_p = [[-1.6345720291137695, 0.16002704203128815, -3.720055341720581, -0.09972929954528809, -2.0044445991516113, -0.25151756405830383, 1.092233657836914, -1.3219331502914429, 2.7261900901794434, -0.09247738122940063], [0.7514986395835876, -1.0940899848937988, 2.1134166717529297, -0.08639880269765854, 0.4848458170890808, -1.8154855966567993, 2.683783531188965, -0.4798979163169861, -0.3681236803531647, 0.3427703082561493], [0.5650380849838257, -0.6899119019508362, -0.3770529627799988, -1.0565630197525024, -2.6447322368621826, -2.462433099746704, 1.0621711015701294, 0.7418441772460938, -0.027339881286025047, -1.2374218702316284]]
    biases_ave_l1_p = [[0.002408053958788514, -0.043371863663196564, -0.10514367371797562, -0.022852644324302673, -0.2746281027793884, 0.09120028465986252, 0.18297520279884338, -0.15229398012161255, 0.163157120347023, -0.03869754448533058]]
    weights_ave_l2_p = [[1.0024975538253784], [0.984232485294342], [-0.8198782801628113], [0.8732115030288696], [-0.6737377047538757], [-2.5154635906219482], [-1.3600997924804688], [-1.046596646308899], [-1.076171875], [0.9199466109275818]]
    biases_ave_l2_p = [[-0.08473621308803558]]

    prediction_ave = sess.run(prediction, feed_dict={x:x_data,weights_l1:weights_ave_l1_p,biases_l1:biases_ave_l1_p,weights_l2:weights_ave_l2_p,biases_l2:biases_ave_l2_p})
    print('预测ave：',prediction_ave)
    
    
    weights_min_l1_p = [[1.5045439004898071, -2.2153048515319824, -0.05088438838720322, -5.076720237731934, 0.08630691468715668, -1.2653288841247559, -0.8979445695877075, 0.05308128520846367, 3.4334943294525146, 0.022553058341145515], [0.02079005539417267, -0.7477558851242065, 0.9663386344909668, -2.0129551887512207, -0.8947086930274963, -0.8803507685661316, 3.7918221950531006, 1.847798228263855, 4.007891654968262, 1.2713923454284668], [-2.1645727157592773, -1.8836021423339844, -0.6455804705619812, -2.0849404335021973, -0.35961779952049255, 0.14747656881809235, -2.182036876678467, -1.195816993713379, -0.455473929643631, 2.7534902095794678]]
    biases_min_l1_p = [[-0.05450700595974922, -0.057999689131975174, 0.009392624720931053, -0.04014386981725693, -0.0126974917948246, 0.001202933257445693, 0.007342544849961996, 0.01960461027920246, -0.04443024843931198, -0.02939458005130291]]
    weights_min_l2_p = [[-1.569625735282898], [1.710821509361267], [-0.38559436798095703], [1.3638279438018799], [0.5812253952026367], [0.3018932342529297], [-2.6823058128356934], [-0.8767712712287903], [2.8246896266937256], [1.399678349494934]]
    biases_min_l2_p = [[-0.024785390123724937]]
    prediction_min = sess.run(prediction, feed_dict={x:x_data,weights_l1:weights_min_l1_p,biases_l1:biases_min_l1_p,weights_l2:weights_min_l2_p,biases_l2:biases_min_l2_p})
    print('预测min：',prediction_min)
    
    #画图  
#     seed_plt = 0.040
    x_plt = [[-seed_plt*23],[-seed_plt*22],[-seed_plt*21],[-seed_plt*20],[-seed_plt*19],[-seed_plt*18],[-seed_plt*17],[-seed_plt*16],[-seed_plt*15],[-seed_plt*14],[-seed_plt*13],[-seed_plt*12],
             [-seed_plt*11],[-seed_plt*10],[-seed_plt*9],[-seed_plt*8],[-seed_plt*7],[-seed_plt*6],[-seed_plt*5],[-seed_plt*4],[-seed_plt*3],[-seed_plt*2],[-seed_plt*1],
             [seed_plt*1],[seed_plt*2],[seed_plt*3],[seed_plt*4],[seed_plt*5],[seed_plt*6],[seed_plt*7],[seed_plt*8],[seed_plt*9],[seed_plt*10],[seed_plt*11],[seed_plt*12],[seed_plt*13],
#              [seed_plt*14],
#               [seed_plt*15],[seed_plt*16]#,[seed_plt*17],[seed_plt*18],[seed_plt*19],[seed_plt*20],[seed_plt*21],[seed_plt*22],[seed_plt*23],[seed_plt*24],[seed_plt*25]
             ]
    plt.figure()  
    plt.plot(x_plt, prediction_ave, 'r-', lw = 5)#画预测的实线，红色  
    plt.plot(x_plt, prediction_min, 'b-', lw = 5)#画预测的实线，红色  
    plt.show()
    
